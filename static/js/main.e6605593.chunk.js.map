{"version":3,"sources":["CountdownTimer/CountdownTimer.module.scss","constants.js","CountdownTimer/CountdownTimer.js","CountdownTimer/CountdownUtils.js","TimeController/TimeController.js","App.js","index.js","TimeController/TimeController.module.scss"],"names":["module","exports","TIME_IN_SECS","DigitUnit","props","className","classnames","classes","Up","Num","number","Center","Down","Digit","nextNum","start","max","key","id","Active","flipIndicator","Prev","defaultProps","calculateDiff","time","Math","floor","Date","getTime","CdTimer","useState","duration","setDuration","useEffect","diff","timeData","days","daysData","daysString","toString","i","length","push","flip","cssClass","formatted","digits","hours","mins","secs","callback","delay","savedCallback","useRef","current","setInterval","clearInterval","useInterval","call","renderElements","Object","keys","forEach","unit","timeString","split","unshift","Unit","map","digit","parseInt","UnitText","CountdownTimer","SecondsLeft","UnitSeparator","Days","inputStyle","Button","children","colour","type","TimeController","modifyTime","resetToPresent","addTime","setAddTime","date","customTime","setCustomTime","customUnit","setCustomUnit","moddedModifyTime","amount","icon","faClock","toLocaleDateString","toLocaleTimeString","OperationToggle","opToggle","checked","onChange","htmlFor","Add","faPlusCircle","Subtract","faMinusCircle","onClick","placeholder","min","required","value","e","target","checkValidity","Dropdown","App","state","bind","this","setState","now","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e6605593.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CountdownTimer\":\"CountdownTimer_CountdownTimer__1B0Pd\",\"Unit\":\"CountdownTimer_Unit__LY2FV\",\"UnitSeparator\":\"CountdownTimer_UnitSeparator__2lab1\",\"UnitText\":\"CountdownTimer_UnitText__21JMV\",\"Digit\":\"CountdownTimer_Digit__F23_P\",\"Days\":\"CountdownTimer_Days__3jQPU\",\"Num\":\"CountdownTimer_Num__13ykV\",\"SecondsLeft\":\"CountdownTimer_SecondsLeft__1taG2\",\"Secs\":\"CountdownTimer_Secs__3j3jy\",\"DigitUnit\":\"CountdownTimer_DigitUnit__1WHlk\",\"Center\":\"CountdownTimer_Center__15X0L\",\"Up\":\"CountdownTimer_Up__3Ykf4\",\"Down\":\"CountdownTimer_Down__30Akg\",\"Prev\":\"CountdownTimer_Prev__1PIdE\",\"flipUp\":\"CountdownTimer_flipUp__2NOqN\",\"Active\":\"CountdownTimer_Active__2sfYY\",\"flipDown\":\"CountdownTimer_flipDown__BO1ag\"};","const TIME_IN_SECS = {\r\n    second: 1,\r\n    minute: 60,\r\n    hour: 3600,\r\n    day: 86400\r\n};\r\n\r\nexport { TIME_IN_SECS };\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useInterval } from './CountdownUtils';\r\nimport PropTypes from 'prop-types';\r\nimport { TIME_IN_SECS } from '../constants.js';\r\n\r\n// CSS\r\nimport classnames from 'classnames';\r\nimport classes from './CountdownTimer.module.scss';\r\n\r\nconst DigitUnit = props => {\r\n    return (\r\n        <div className={classnames(classes.DigitUnit, props.className)}>\r\n            <div className={classes.Up}>\r\n                <div className={classes.Num}>{props.number}</div>\r\n            </div>\r\n            <div className={classes.Center} />\r\n            <div className={classes.Down}>\r\n                <div className={classes.Num}>{props.number}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Digit = props => {\r\n    const nextNum = props.start === 0 ? props.max : props.start - 1;\r\n\r\n    return (\r\n        <div className={classes.Digit}>\r\n            <DigitUnit\r\n                key={`${props.id}-${nextNum}`}\r\n                number={nextNum}\r\n                className={{ [classes.Active]: props.flipIndicator }}\r\n            />\r\n            <DigitUnit\r\n                key={`${props.id}-${props.start}`}\r\n                number={props.start}\r\n                className={{ [classes.Prev]: props.flipIndicator }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nDigit.propTypes = {\r\n    id: PropTypes.string, // For key purposes\r\n    max: PropTypes.number, // Highest digit. For example, 5 for the tens place of a secs counter because there can only be 60 secs in a minute\r\n    start: PropTypes.number, // The starting digit\r\n    flipIndicator: PropTypes.bool // When this prop hits 0, then this digit plays the flip animation.\r\n};\r\n\r\nDigit.defaultProps = {\r\n    max: 9,\r\n    start: 0\r\n};\r\n\r\nconst calculateDiff = time =>\r\n    Math.floor(Math.max(time - new Date().getTime(), 0) / 1000);\r\n\r\nconst CdTimer = props => {\r\n    const [duration, setDuration] = useState(calculateDiff(props.time));\r\n    useEffect(() => {\r\n        setDuration(calculateDiff(props.time));\r\n    }, [props.time]);\r\n    let diff = duration;\r\n    const timeData = {};\r\n\r\n    const days = Math.floor(diff / TIME_IN_SECS.day);\r\n    diff -= days * TIME_IN_SECS.day;\r\n    // Since days doesn't have an upper bound on its number of digits, we have to generate those\r\n    const daysData = [];\r\n    const daysString = days.toString();\r\n    for (let i = 0; i < daysString.length; i++) {\r\n        daysData.push({ max: 9, flip: TIME_IN_SECS.day * i });\r\n    }\r\n    timeData['days'] = {\r\n        cssClass: 'Days',\r\n        formatted: days,\r\n        digits: daysData\r\n    };\r\n\r\n    const hours = Math.floor(diff / TIME_IN_SECS.hour);\r\n    diff -= hours * TIME_IN_SECS.hour;\r\n    timeData['hours'] = {\r\n        cssClass: 'Hours',\r\n        formatted: hours,\r\n        digits: [\r\n            { max: 2, flip: TIME_IN_SECS.hour * 10 },\r\n            { max: 9, flip: TIME_IN_SECS.hour }\r\n        ]\r\n    };\r\n\r\n    const mins = Math.floor(diff / TIME_IN_SECS.minute);\r\n    diff -= mins * TIME_IN_SECS.minute;\r\n    timeData['mins'] = {\r\n        cssClass: 'Mins',\r\n        formatted: mins,\r\n        digits: [\r\n            { max: 5, flip: TIME_IN_SECS.minute * 10 },\r\n            { max: 9, flip: TIME_IN_SECS.minute }\r\n        ]\r\n    };\r\n\r\n    const secs = Math.floor(diff);\r\n    timeData['secs'] = {\r\n        cssClass: 'Secs',\r\n        formatted: secs,\r\n        digits: [\r\n            { max: 5, flip: TIME_IN_SECS.second * 10 },\r\n            { max: 9, flip: TIME_IN_SECS.second }\r\n        ]\r\n    };\r\n\r\n    useInterval(\r\n        () => {\r\n            setDuration(duration - 1);\r\n            if (Math.floor(duration) === 0 && !!props.callback) {\r\n                props.callback.call();\r\n            }\r\n        },\r\n        Math.floor(duration) <= 0 ? null : 1000\r\n    );\r\n\r\n    const renderElements = {};\r\n\r\n    Object.keys(timeData).forEach(unit => {\r\n        const time = timeData[unit];\r\n        const timeString = time['formatted'].toString().split('');\r\n        while (timeString.length < time['digits'].length) {\r\n            timeString.unshift('0'); // pad array with 0s to match the length of digits array defined above\r\n        }\r\n        renderElements[unit] = (\r\n            <div\r\n                className={classnames(\r\n                    'inline-block',\r\n                    classes.Unit,\r\n                    classes[time['cssClass']]\r\n                )}\r\n            >\r\n                {timeString.map((digit, i) => (\r\n                    <Digit\r\n                        id={`${unit}-${i}`}\r\n                        key={`${unit}-${i}`}\r\n                        unit={unit}\r\n                        start={parseInt(digit)}\r\n                        max={time['digits'][i]['max']}\r\n                        flipIndicator={\r\n                            duration % time['digits'][i]['flip'] === 0 &&\r\n                            duration > 0\r\n                        }\r\n                    />\r\n                ))}\r\n                <div className={classes.UnitText}>{unit}</div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div\r\n            className={classnames('text-center', classes.CountdownTimer, {\r\n                [classes.SecondsLeft]: duration < TIME_IN_SECS.minute\r\n            })}\r\n        >\r\n            {duration >= TIME_IN_SECS.day ? (\r\n                <>\r\n                    {renderElements['days']}\r\n                    <div\r\n                        className={classnames(\r\n                            classes.UnitSeparator,\r\n                            classes.Days\r\n                        )}\r\n                    />\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n            {duration >= TIME_IN_SECS.minute ? (\r\n                <>\r\n                    {renderElements['hours']}\r\n                    <div className={classnames(classes.UnitSeparator)}>:</div>\r\n                    {renderElements['mins']}\r\n                    <div className={classnames(classes.UnitSeparator)}>:</div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n            {renderElements['secs']}\r\n        </div>\r\n    );\r\n};\r\n\r\nCdTimer.propTypes = {\r\n    time: PropTypes.number,\r\n    callback: PropTypes.func\r\n};\r\n\r\nCdTimer.defaultProps = {\r\n    time: 0\r\n};\r\n\r\nexport default CdTimer;\r\n","import { useEffect, useRef } from 'react';\r\n\r\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nfunction useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport { useInterval };\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { TIME_IN_SECS } from '../constants.js';\r\n\r\n// FontAwesome\r\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faClock,\r\n    faPlusCircle,\r\n    faMinusCircle\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\n// CSS\r\nimport classnames from 'classnames';\r\nimport classes from './TimeController.module.scss';\r\nconst inputStyle = 'px-4 py-1 my-1 rounded-full';\r\n\r\nconst Button = ({ children, ...props }) => (\r\n    <button\r\n        className={classnames(\r\n            inputStyle,\r\n            {\r\n                'bg-red-700 active:bg-red-800 text-white':\r\n                    props.colour === 'red'\r\n            },\r\n            { 'bg-gray-500 active:bg-gray-600': !props.colour }\r\n        )}\r\n        type=\"button\"\r\n        {...props}\r\n    >\r\n        {children}\r\n    </button>\r\n);\r\n\r\nconst TimeController = ({ modifyTime, resetToPresent, ...props }) => {\r\n    const [addTime, setAddTime] = useState(true);\r\n    const date = new Date(props.time);\r\n\r\n    const [customTime, setCustomTime] = useState(0);\r\n    const [customUnit, setCustomUnit] = useState(1);\r\n\r\n    const moddedModifyTime = amount => {\r\n        modifyTime(amount * (addTime ? 1 : -1));\r\n    };\r\n\r\n    return (\r\n        <div className=\"inline-block p-4 m-4 rounded-lg bg-gray-400 text-gray-800\">\r\n            <div className=\"text-lg\">\r\n                <Icon icon={faClock} /> Time Control\r\n            </div>\r\n\r\n            <div className=\"flex flex-col justify-center p-2 m-2 rounded-lg bg-gray-300\">\r\n                {date.toLocaleDateString()} {date.toLocaleTimeString()}\r\n            </div>\r\n\r\n            <div className=\"flex\">\r\n                <div\r\n                    className={classnames(\r\n                        classes.OperationToggle,\r\n                        'flex flex-col justify-center p-2 m-2 rounded-lg bg-gray-300'\r\n                    )}\r\n                >\r\n                    <input\r\n                        id={classes.opToggle}\r\n                        type=\"checkbox\"\r\n                        checked={addTime}\r\n                        onChange={() => {\r\n                            setAddTime(!addTime);\r\n                        }}\r\n                    />\r\n                    <label htmlFor={classes.opToggle} className={classes.Add}>\r\n                        <Icon icon={faPlusCircle} className=\"cursor-pointer\" />\r\n                    </label>\r\n                    <label\r\n                        htmlFor={classes.opToggle}\r\n                        className={classes.Subtract}\r\n                    >\r\n                        <Icon icon={faMinusCircle} className=\"cursor-pointer\" />\r\n                    </label>\r\n                </div>\r\n                <div className=\"p-2 m-2 rounded-lg bg-gray-300\">\r\n                    Preset\r\n                    <div className=\"flex flex-col\">\r\n                        <Button\r\n                            onClick={() => {\r\n                                moddedModifyTime(TIME_IN_SECS.second);\r\n                            }}\r\n                        >\r\n                            1 second\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => {\r\n                                moddedModifyTime(TIME_IN_SECS.minute);\r\n                            }}\r\n                        >\r\n                            1 minute\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => {\r\n                                moddedModifyTime(TIME_IN_SECS.hour);\r\n                            }}\r\n                        >\r\n                            1 hour\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => {\r\n                                moddedModifyTime(TIME_IN_SECS.day);\r\n                            }}\r\n                        >\r\n                            1 day\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => {\r\n                                resetToPresent();\r\n                            }}\r\n                            colour=\"red\"\r\n                        >\r\n                            Now\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"p-2 m-2 rounded-lg bg-gray-300\">\r\n                    Custom\r\n                    <div className=\"flex flex-col\">\r\n                        <input\r\n                            className={inputStyle}\r\n                            placeholder=\"Duration\"\r\n                            type=\"number\"\r\n                            min=\"0\"\r\n                            required\r\n                            value={customTime}\r\n                            onChange={e => {\r\n                                if (e.target.checkValidity()) {\r\n                                    setCustomTime(parseInt(e.target.value));\r\n                                }\r\n                            }}\r\n                        ></input>\r\n                        <div className={classes.Dropdown}>\r\n                            <select\r\n                                className={classnames(\r\n                                    inputStyle,\r\n                                    'appearance-none',\r\n                                    'w-full'\r\n                                )}\r\n                                value={customUnit}\r\n                                onChange={e => {\r\n                                    if (e.target.checkValidity()) {\r\n                                        setCustomUnit(parseInt(e.target.value));\r\n                                    }\r\n                                }}\r\n                            >\r\n                                <option value={TIME_IN_SECS.second}>seconds</option>\r\n                                <option value={TIME_IN_SECS.minute}>minutes</option>\r\n                                <option value={TIME_IN_SECS.hour}>hours</option>\r\n                                <option value={TIME_IN_SECS.day}>days</option>\r\n                            </select>\r\n                        </div>\r\n                        <Button\r\n                            onClick={() => {\r\n                                moddedModifyTime(customTime * customUnit);\r\n                            }}\r\n                        >\r\n                            Modify\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nTimeController.propTypes = {\r\n    time: PropTypes.number\r\n};\r\n\r\nexport default TimeController;\r\n","import React, { Component } from 'react';\nimport CountdownTimer from './CountdownTimer/CountdownTimer';\nimport TimeController from './TimeController/TimeController';\n\n// CSS\nimport './App.css';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = { time: new Date().getTime() };\n        this.modifyTime = this.modifyTime.bind(this);\n        this.resetToPresent = this.resetToPresent.bind(this);\n    }\n\n    modifyTime(time) {\n        this.setState({ time: this.state.time + time * 1000 });\n    }\n\n    resetToPresent() {\n        this.setState({ time: new Date().getTime() });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <CountdownTimer\n                    time={this.state.time}\n                    now={new Date().getTime()}\n                />\n                <TimeController\n                    time={this.state.time}\n                    modifyTime={this.modifyTime}\n                    resetToPresent={this.resetToPresent}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport './styles/tailwind.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"OperationToggle\":\"TimeController_OperationToggle__3lE-q\",\"opToggle\":\"TimeController_opToggle__2XE4u\",\"Add\":\"TimeController_Add__Bincv\",\"Subtract\":\"TimeController_Subtract__2AXLu\",\"Dropdown\":\"TimeController_Dropdown__3Uft8\"};"],"sourceRoot":""}