{"version":3,"sources":["CountdownTimer/CountdownTimer.module.scss","constants.js","CountdownTimer/CountdownTimer.js","CountdownTimer/CountdownUtils.js","TimeController/TimeController.js","App.js","index.js"],"names":["module","exports","TIME_IN_SECS","second","minute","hour","day","DigitUnit","props","className","classnames","classes","Up","Num","number","Center","Down","Digit","nextNum","start","max","key","id","Active","flipIndicator","Prev","defaultProps","calculateDiff","time","Math","floor","Date","now","CdTimer","useState","duration","setDuration","useEffect","diff","timeData","days","daysData","daysString","toString","i","length","push","flip","cssClass","formatted","digits","hours","mins","secs","callback","delay","savedCallback","useRef","current","setInterval","clearInterval","useInterval","call","renderElements","Object","keys","forEach","unit","timeString","padStart","Unit","split","map","digit","parseInt","UnitText","CountdownTimer","SecondsLeft","UnitSeparator","Days","inputStyle","Button","children","colour","type","TimeController","modifyTime","setTime","resetToPresent","date","addTimeDefault","customAddTime","setCustomAddTime","setTimeDefault","customSetTime","setCustomSetTime","moddedModifyTime","modifier","finalAmount","reduce","acc","curr","abs","modifyField","value","field","icon","faClock","faHourglassEnd","toLocaleDateString","toLocaleTimeString","onClick","title","faUndoAlt","placeholder","min","onChange","e","target","faPlus","faMinus","pattern","step","year","month","getTime","faArrowRight","App","state","bind","this","setState","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.483bc07c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CountdownTimer\":\"CountdownTimer_CountdownTimer__1B0Pd\",\"Unit\":\"CountdownTimer_Unit__LY2FV\",\"UnitSeparator\":\"CountdownTimer_UnitSeparator__2lab1\",\"UnitText\":\"CountdownTimer_UnitText__21JMV\",\"Digit\":\"CountdownTimer_Digit__F23_P\",\"Days\":\"CountdownTimer_Days__3jQPU\",\"Num\":\"CountdownTimer_Num__13ykV\",\"SecondsLeft\":\"CountdownTimer_SecondsLeft__1taG2\",\"Secs\":\"CountdownTimer_Secs__3j3jy\",\"DigitUnit\":\"CountdownTimer_DigitUnit__1WHlk\",\"Center\":\"CountdownTimer_Center__15X0L\",\"Up\":\"CountdownTimer_Up__3Ykf4\",\"Down\":\"CountdownTimer_Down__30Akg\",\"Prev\":\"CountdownTimer_Prev__1PIdE\",\"flipUp\":\"CountdownTimer_flipUp__2NOqN\",\"Active\":\"CountdownTimer_Active__2sfYY\",\"flipDown\":\"CountdownTimer_flipDown__BO1ag\"};","const TIME_IN_SECS = {\r\n    second: 1,\r\n    minute: 60,\r\n    hour: 3600,\r\n    day: 86400\r\n};\r\n\r\n// According to ECMA specs, max and min time is 8640000000000 seconds to either side of the Unix Epoch.\r\n// http://ecma-international.org/ecma-262/5.1/#sec-15.9.1.1\r\nconst TIME_LIMIT = 8640000000000;\r\n\r\nexport { TIME_IN_SECS, TIME_LIMIT };\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useInterval } from './CountdownUtils';\r\nimport PropTypes from 'prop-types';\r\nimport { TIME_IN_SECS } from '../constants.js';\r\n\r\n// CSS\r\nimport classnames from 'classnames';\r\nimport classes from './CountdownTimer.module.scss';\r\n\r\nconst DigitUnit = props => {\r\n    return (\r\n        <div className={classnames(classes.DigitUnit, props.className)}>\r\n            <div className={classes.Up}>\r\n                <div className={classes.Num}>{props.number}</div>\r\n            </div>\r\n            <div className={classes.Center} />\r\n            <div className={classes.Down}>\r\n                <div className={classes.Num}>{props.number}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Digit = props => {\r\n    const nextNum = props.start === 0 ? props.max : props.start - 1;\r\n\r\n    return (\r\n        <div className={classes.Digit}>\r\n            <DigitUnit\r\n                key={`${props.id}-${nextNum}`}\r\n                number={nextNum}\r\n                className={{ [classes.Active]: props.flipIndicator }}\r\n            />\r\n            <DigitUnit\r\n                key={`${props.id}-${props.start}`}\r\n                number={props.start}\r\n                className={{ [classes.Prev]: props.flipIndicator }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nDigit.propTypes = {\r\n    id: PropTypes.string, // For key purposes\r\n    max: PropTypes.number, // Highest digit. For example, 5 for the tens place of a secs counter because there can only be 60 secs in a minute\r\n    start: PropTypes.number, // The starting digit\r\n    flipIndicator: PropTypes.bool // When this prop hits 0, then this digit plays the flip animation.\r\n};\r\n\r\nDigit.defaultProps = {\r\n    max: 9,\r\n    start: 0\r\n};\r\n\r\nconst calculateDiff = time => Math.floor(Math.max(time - Date.now(), 0) / 1000);\r\n\r\nconst CdTimer = props => {\r\n    const [duration, setDuration] = useState(calculateDiff(props.time));\r\n    useEffect(() => {\r\n        setDuration(calculateDiff(props.time));\r\n    }, [props.time]);\r\n    let diff = duration;\r\n    const timeData = {};\r\n\r\n    const days = Math.floor(diff / TIME_IN_SECS.day);\r\n    diff -= days * TIME_IN_SECS.day;\r\n    // Since days doesn't have an upper bound on its number of digits, we have to generate those\r\n    const daysData = [];\r\n    const daysString = days.toString();\r\n    for (let i = 0; i < daysString.length; i++) {\r\n        daysData.push({ max: 9, flip: TIME_IN_SECS.day * i });\r\n    }\r\n    timeData['days'] = {\r\n        cssClass: 'Days',\r\n        formatted: days,\r\n        digits: daysData\r\n    };\r\n\r\n    const hours = Math.floor(diff / TIME_IN_SECS.hour);\r\n    diff -= hours * TIME_IN_SECS.hour;\r\n    timeData['hours'] = {\r\n        cssClass: 'Hours',\r\n        formatted: hours,\r\n        digits: [\r\n            { max: 2, flip: TIME_IN_SECS.hour * 10 },\r\n            { max: 9, flip: TIME_IN_SECS.hour }\r\n        ]\r\n    };\r\n\r\n    const mins = Math.floor(diff / TIME_IN_SECS.minute);\r\n    diff -= mins * TIME_IN_SECS.minute;\r\n    timeData['mins'] = {\r\n        cssClass: 'Mins',\r\n        formatted: mins,\r\n        digits: [\r\n            { max: 5, flip: TIME_IN_SECS.minute * 10 },\r\n            { max: 9, flip: TIME_IN_SECS.minute }\r\n        ]\r\n    };\r\n\r\n    const secs = Math.floor(diff);\r\n    timeData['secs'] = {\r\n        cssClass: 'Secs',\r\n        formatted: secs,\r\n        digits: [\r\n            { max: 5, flip: TIME_IN_SECS.second * 10 },\r\n            { max: 9, flip: TIME_IN_SECS.second }\r\n        ]\r\n    };\r\n\r\n    useInterval(\r\n        () => {\r\n            setDuration(duration - 1);\r\n            if (Math.floor(duration) === 0 && !!props.callback) {\r\n                props.callback.call();\r\n            }\r\n        },\r\n        Math.floor(duration) <= 0 ? null : 1000\r\n    );\r\n\r\n    const renderElements = {};\r\n\r\n    Object.keys(timeData).forEach(unit => {\r\n        const time = timeData[unit];\r\n        const timeString = time['formatted']\r\n            .toString()\r\n            .padStart(time['digits'].length, '0');\r\n        renderElements[unit] = (\r\n            <div\r\n                className={classnames(\r\n                    'inline-block',\r\n                    classes.Unit,\r\n                    classes[time['cssClass']]\r\n                )}\r\n            >\r\n                {timeString.split('').map((digit, i) => (\r\n                    <Digit\r\n                        id={`${unit}-${i}`}\r\n                        key={`${unit}-${i}`}\r\n                        unit={unit}\r\n                        start={parseInt(digit)}\r\n                        max={time['digits'][i]['max']}\r\n                        flipIndicator={\r\n                            duration % time['digits'][i]['flip'] === 0 &&\r\n                            duration > 0\r\n                        }\r\n                    />\r\n                ))}\r\n                <div className={classes.UnitText}>{unit}</div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div\r\n            className={classnames('text-center', classes.CountdownTimer, {\r\n                [classes.SecondsLeft]: duration < TIME_IN_SECS.minute\r\n            })}\r\n        >\r\n            {duration >= TIME_IN_SECS.day ? (\r\n                <>\r\n                    {renderElements['days']}\r\n                    <div\r\n                        className={classnames(\r\n                            classes.UnitSeparator,\r\n                            classes.Days\r\n                        )}\r\n                    />\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n            {duration >= TIME_IN_SECS.minute ? (\r\n                <>\r\n                    {renderElements['hours']}\r\n                    <div className={classnames(classes.UnitSeparator)}>:</div>\r\n                    {renderElements['mins']}\r\n                    <div className={classnames(classes.UnitSeparator)}>:</div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n            {renderElements['secs']}\r\n        </div>\r\n    );\r\n};\r\n\r\nCdTimer.propTypes = {\r\n    time: PropTypes.number,\r\n    callback: PropTypes.func\r\n};\r\n\r\nCdTimer.defaultProps = {\r\n    time: 0\r\n};\r\n\r\nexport default CdTimer;\r\n","import { useEffect, useRef } from 'react';\r\n\r\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nfunction useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport { useInterval };\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { TIME_IN_SECS, TIME_LIMIT } from '../constants.js';\r\n\r\n// FontAwesome\r\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faClock,\r\n    faPlus,\r\n    faMinus,\r\n    faUndoAlt,\r\n    faArrowRight,\r\n    faHourglassEnd\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\n// CSS\r\nimport classnames from 'classnames';\r\nconst inputStyle = 'px-4 py-1 m-1 w-48 rounded-full';\r\n\r\nconst Button = ({ children, ...props }) => (\r\n    <button\r\n        className={classnames(\r\n            'flex justify-center items-center h-8 w-8 m-1 rounded-full text-white',\r\n            {\r\n                'bg-red-700 active:bg-red-800': props.colour === 'red'\r\n            },\r\n            { 'bg-gray-700 active:bg-gray-900': !props.colour }\r\n        )}\r\n        type=\"button\"\r\n        {...props}\r\n    >\r\n        {children}\r\n    </button>\r\n);\r\n\r\nconst TimeController = ({ modifyTime, setTime, resetToPresent, ...props }) => {\r\n    const date = new Date(props.time);\r\n\r\n    const addTimeDefault = {\r\n        day: '',\r\n        hour: '',\r\n        minute: '',\r\n        second: ''\r\n    };\r\n    const [customAddTime, setCustomAddTime] = useState(addTimeDefault);\r\n\r\n    const formatTime = time => time.toString().padStart(2, '0');\r\n    const setTimeDefault = {\r\n        date: '',\r\n        time: ''\r\n    };\r\n    const [customSetTime, setCustomSetTime] = useState(setTimeDefault);\r\n\r\n    const moddedModifyTime = modifier => {\r\n        const finalAmount =\r\n            Object.keys(customAddTime).reduce(\r\n                (acc, curr) => acc + (customAddTime[curr] || 0) * TIME_IN_SECS[curr], 0\r\n            ) * modifier;\r\n\r\n        if (Math.abs(props.time / 1000 + finalAmount) <= TIME_LIMIT) {\r\n            modifyTime(finalAmount);\r\n        }\r\n    };\r\n\r\n    const modifyField = (value, field) => {\r\n        setCustomAddTime({\r\n            ...customAddTime,\r\n            [field]: value\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"inline-block p-4 m-4 rounded-lg bg-gray-400 text-gray-800\">\r\n            <div className=\"text-lg\">\r\n                <Icon icon={faClock} /> Time Control\r\n            </div>\r\n\r\n            <div className=\"flex items-center justify-center\">\r\n                <span className=\"flex-1 p-2 m-2 rounded-lg bg-gray-300\">\r\n                    <Icon icon={faHourglassEnd} className=\"mr-3\" />\r\n                    {date.toLocaleDateString()} {date.toLocaleTimeString()}\r\n                </span>\r\n                <Button\r\n                    onClick={() => {\r\n                        resetToPresent();\r\n                    }}\r\n                    colour=\"red\"\r\n                    title=\"Reset to present\"\r\n                >\r\n                    <Icon icon={faUndoAlt} />\r\n                </Button>\r\n            </div>\r\n\r\n            <div className=\"flex flex-col sm:flex-row\">\r\n                <div className=\"p-2 m-2 rounded-lg bg-gray-300\">\r\n                    Modify Time\r\n                    <div className=\"flex flex-col\">\r\n                        <input\r\n                            className={inputStyle}\r\n                            placeholder=\"Days\"\r\n                            type=\"number\"\r\n                            min=\"0\"\r\n                            value={customAddTime['day']}\r\n                            onChange={e => {\r\n                                modifyField(e.target.value ? parseInt(e.target.value) : '', 'day');\r\n                            }}\r\n                        />\r\n                        <input\r\n                            className={inputStyle}\r\n                            placeholder=\"Hours\"\r\n                            type=\"number\"\r\n                            min=\"0\"\r\n                            value={customAddTime['hour']}\r\n                            onChange={e => {\r\n                                modifyField(e.target.value ? parseInt(e.target.value) : '', 'hour');\r\n                            }}\r\n                        />\r\n                        <input\r\n                            className={inputStyle}\r\n                            placeholder=\"Minutes\"\r\n                            type=\"number\"\r\n                            min=\"0\"\r\n                            value={customAddTime['minute']}\r\n                            onChange={e => {\r\n                                modifyField(parseInt(e.target.value), 'minute');\r\n                            }}\r\n                        />\r\n                        <input\r\n                            className={inputStyle}\r\n                            placeholder=\"Seconds\"\r\n                            type=\"number\"\r\n                            min=\"0\"\r\n                            value={customAddTime['second']}\r\n                            onChange={e => {\r\n                                modifyField(parseInt(e.target.value), 'second');\r\n                            }}\r\n                        />\r\n                        <div className=\"flex justify-center\">\r\n                            <Button\r\n                                onClick={() => {\r\n                                    moddedModifyTime(1);\r\n                                }}\r\n                                title=\"Add to current time\"\r\n                            >\r\n                                <Icon icon={faPlus} />\r\n                            </Button>\r\n\r\n                            <Button\r\n                                onClick={() => {\r\n                                    moddedModifyTime(-1);\r\n                                }}\r\n                                title=\"Subtract from current time\"\r\n                            >\r\n                                <Icon icon={faMinus} />\r\n                            </Button>\r\n                            <Button\r\n                                onClick={() => {\r\n                                    setCustomAddTime(addTimeDefault);\r\n                                }}\r\n                                colour=\"red\"\r\n                                title=\"Reset to default value\"\r\n                            >\r\n                                <Icon icon={faUndoAlt} />\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"p-2 m-2 rounded-lg bg-gray-300\">\r\n                    Set Time\r\n                    <div className=\"flex flex-col\">\r\n                        <input\r\n                            className={inputStyle}\r\n                            type=\"date\"\r\n                            pattern=\"\\d{4}-\\d{2}-\\d{2}\"\r\n                            placeholder=\"yyyy-mm-dd\"\r\n                            value={customSetTime['date']}\r\n                            onChange={e => {\r\n                                setCustomSetTime({\r\n                                    date: e.target.value,\r\n                                    time: customSetTime['time']\r\n                                });\r\n                            }}\r\n                        />\r\n                        <input\r\n                            className={inputStyle}\r\n                            type=\"time\"\r\n                            step=\"1\"\r\n                            pattern=\"[0-9]{2}:[0-9]{2}:[0-9]{2}\"\r\n                            placeholder=\"hh:mm:ss\"\r\n                            value={customSetTime['time']}\r\n                            onChange={e => {\r\n                                setCustomSetTime({\r\n                                    date: customSetTime['date'],\r\n                                    time: e.target.value\r\n                                });\r\n                            }}\r\n                        />\r\n                        <div className=\"flex justify-center\">\r\n                            <Button\r\n                                onClick={() => {\r\n                                    const [year, month, day] = customSetTime['date'].split(\"-\");\r\n                                    const [hours, minute, second] = customSetTime['time'].split(\":\");\r\n                                    // Uglier but Date string parsing is REALLY bad\r\n                                    // https://stackoverflow.com/questions/2587345/why-does-date-parse-give-incorrect-results\r\n                                    setTime(\r\n                                        new Date(\r\n                                            parseInt(year),\r\n                                            parseInt(month) - 1,\r\n                                            parseInt(day),\r\n                                            parseInt(hours),\r\n                                            parseInt(minute),\r\n                                            parseInt(second)\r\n                                        ).getTime()\r\n                                    );\r\n                                }}\r\n                            >\r\n                                <Icon icon={faArrowRight} />\r\n                            </Button>\r\n                            <Button\r\n                                onClick={() => {\r\n                                    setCustomSetTime(setTimeDefault);\r\n                                }}\r\n                                colour=\"red\"\r\n                                title=\"Reset to default value\"\r\n                            >\r\n                                <Icon icon={faUndoAlt} />\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nTimeController.propTypes = {\r\n    time: PropTypes.number\r\n};\r\n\r\nexport default TimeController;\r\n","import React, { Component } from 'react';\nimport CountdownTimer from './CountdownTimer/CountdownTimer';\nimport TimeController from './TimeController/TimeController';\n\n// CSS\nimport './App.css';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = { time: Date.now() };\n        this.modifyTime = this.modifyTime.bind(this);\n        this.setTime = this.setTime.bind(this);\n        this.resetToPresent = this.resetToPresent.bind(this);\n    }\n\n    modifyTime(time) {\n        this.setState({ time: this.state.time + time * 1000 });\n    }\n\n    setTime(time) {\n        this.setState({ time });\n    }\n\n    resetToPresent() {\n        this.setState({ time: Date.now() });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <CountdownTimer time={this.state.time} />\n                <TimeController\n                    time={this.state.time}\n                    modifyTime={this.modifyTime}\n                    setTime={this.setTime}\n                    resetToPresent={this.resetToPresent}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport './styles/tailwind.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}