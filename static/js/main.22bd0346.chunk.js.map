{"version":3,"sources":["CountdownTimer/CountdownTimer.module.css","constants.js","CountdownTimer/DigitUnit.js","CountdownTimer/Digit.js","CountdownTimer/CountdownTimer.js","CountdownTimer/CountdownUtils.js","TimeController/ControllerButton.js","TimeController/TimeController.js","App.js","index.js","TimeController/TimeController.module.css"],"names":["module","exports","TIME_IN_SECS","second","minute","hour","day","DigitUnit","props","className","classnames","classes","Up","Num","number","Center","Down","Digit","nextNum","start","max","key","id","Active","flipIndicator","Prev","defaultProps","calculateDiff","time","Math","floor","Date","now","CdTimer","useState","duration","setDuration","useEffect","diff","timeData","days","daysData","daysString","toString","i","length","push","flip","cssClass","formatted","digits","hours","mins","secs","callback","delay","savedCallback","useRef","current","setInterval","clearInterval","useInterval","call","renderElements","Object","keys","forEach","unit","timeString","padStart","Unit","split","map","digit","parseInt","UnitText","CountdownTimer","SecondsLeft","UnitSeparator","Days","Button","children","type","addTimeDefault","formatTime","setTimeDefault","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","TimeController","modifyTime","setTime","resetToPresent","customAddTime","setCustomAddTime","customSetTime","setCustomSetTime","outOfBounds","setOutOfBounds","moddedModifyTime","modifier","finalAmount","reduce","acc","curr","abs","modifyField","value","field","TimeControl","icon","faClock","InfoBlock","faHourglassEnd","toLocaleDateString","toLocaleTimeString","onClick","Red","title","faUndoAlt","placeholder","min","onChange","e","target","faPlus","faMinus","pattern","required","step","v","year","month","getTime","faArrowRight","App","addedTime","newTime","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.22bd0346.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CountdownTimer\":\"CountdownTimer_CountdownTimer__10ja5\",\"Unit\":\"CountdownTimer_Unit__YQuTp\",\"UnitSeparator\":\"CountdownTimer_UnitSeparator__3gjPQ\",\"UnitText\":\"CountdownTimer_UnitText__2XmMA\",\"Digit\":\"CountdownTimer_Digit__3cBIi\",\"Days\":\"CountdownTimer_Days__3sNie\",\"Num\":\"CountdownTimer_Num__1nxBM\",\"SecondsLeft\":\"CountdownTimer_SecondsLeft__3l42I\",\"Secs\":\"CountdownTimer_Secs__DMvfJ\",\"DigitUnit\":\"CountdownTimer_DigitUnit__2XSqW\",\"Center\":\"CountdownTimer_Center__3U00C\",\"Up\":\"CountdownTimer_Up__1uO0V\",\"Down\":\"CountdownTimer_Down__22Cru\",\"Prev\":\"CountdownTimer_Prev__3lxlE\",\"flipUp\":\"CountdownTimer_flipUp__vmsmj\",\"Active\":\"CountdownTimer_Active__2IiuC\",\"flipDown\":\"CountdownTimer_flipDown__PBt8i\"};","const TIME_IN_SECS = {\r\n    second: 1,\r\n    minute: 60,\r\n    hour: 3600,\r\n    day: 86400\r\n};\r\n\r\n// According to ECMA specs, max and min time is 8640000000000 seconds to either side of the Unix Epoch.\r\n// http://ecma-international.org/ecma-262/5.1/#sec-15.9.1.1\r\nconst TIME_LIMIT = 8640000000000;\r\n\r\nexport { TIME_IN_SECS, TIME_LIMIT };\r\n","import React from 'react';\r\n\r\n// CSS\r\nimport classnames from 'classnames';\r\nimport classes from './CountdownTimer.module.css';\r\n\r\nconst DigitUnit = props => {\r\n    return (\r\n        <div className={classnames(classes.DigitUnit, props.className)}>\r\n            <div className={classes.Up}>\r\n                <div className={classes.Num}>{props.number}</div>\r\n            </div>\r\n            <div className={classes.Center} />\r\n            <div className={classes.Down}>\r\n                <div className={classes.Num}>{props.number}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DigitUnit;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Components\r\nimport DigitUnit from './DigitUnit';\r\n\r\n// CSS\r\nimport classes from './CountdownTimer.module.css';\r\n\r\nconst Digit = props => {\r\n    const nextNum = props.start === 0 ? props.max : props.start - 1;\r\n\r\n    return (\r\n        <div className={classes.Digit}>\r\n            <DigitUnit\r\n                key={`${props.id}-${nextNum}`}\r\n                number={nextNum}\r\n                className={{ [classes.Active]: props.flipIndicator }}\r\n            />\r\n            <DigitUnit\r\n                key={`${props.id}-${props.start}`}\r\n                number={props.start}\r\n                className={{ [classes.Prev]: props.flipIndicator }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nDigit.propTypes = {\r\n    id: PropTypes.string, // For key purposes\r\n    max: PropTypes.number, // Highest digit. For example, 5 for the tens place of a secs counter because there can only be 60 secs in a minute\r\n    start: PropTypes.number, // The starting digit\r\n    flipIndicator: PropTypes.bool // When this prop hits 0, then this digit plays the flip animation.\r\n};\r\n\r\nDigit.defaultProps = {\r\n    max: 9,\r\n    start: 0\r\n};\r\n\r\nexport default Digit;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useInterval } from './CountdownUtils';\r\nimport PropTypes from 'prop-types';\r\nimport { TIME_IN_SECS } from '../constants';\r\n\r\n// Components\r\nimport Digit from './Digit';\r\n\r\n// CSS\r\nimport classnames from 'classnames';\r\nimport classes from './CountdownTimer.module.css';\r\n\r\nconst calculateDiff = time => Math.floor(Math.max(time - Date.now(), 0) / 1000);\r\n\r\nconst CdTimer = props => {\r\n    const [duration, setDuration] = useState(calculateDiff(props.time));\r\n    useEffect(() => {\r\n        setDuration(calculateDiff(props.time));\r\n    }, [props.time]);\r\n    let diff = duration;\r\n    const timeData = {};\r\n\r\n    const days = Math.floor(diff / TIME_IN_SECS.day);\r\n    diff -= days * TIME_IN_SECS.day;\r\n    // Since days doesn't have an upper bound on its number of digits, we have to generate those\r\n    const daysData = [];\r\n    const daysString = days.toString();\r\n    for (let i = 0; i < daysString.length; i++) {\r\n        daysData.push({ max: 9, flip: TIME_IN_SECS.day * i });\r\n    }\r\n    timeData['days'] = {\r\n        cssClass: 'Days',\r\n        formatted: days,\r\n        digits: daysData\r\n    };\r\n\r\n    const hours = Math.floor(diff / TIME_IN_SECS.hour);\r\n    diff -= hours * TIME_IN_SECS.hour;\r\n    timeData['hours'] = {\r\n        cssClass: 'Hours',\r\n        formatted: hours,\r\n        digits: [\r\n            { max: 2, flip: TIME_IN_SECS.hour * 10 },\r\n            { max: 9, flip: TIME_IN_SECS.hour }\r\n        ]\r\n    };\r\n\r\n    const mins = Math.floor(diff / TIME_IN_SECS.minute);\r\n    diff -= mins * TIME_IN_SECS.minute;\r\n    timeData['mins'] = {\r\n        cssClass: 'Mins',\r\n        formatted: mins,\r\n        digits: [\r\n            { max: 5, flip: TIME_IN_SECS.minute * 10 },\r\n            { max: 9, flip: TIME_IN_SECS.minute }\r\n        ]\r\n    };\r\n\r\n    const secs = Math.floor(diff);\r\n    timeData['secs'] = {\r\n        cssClass: 'Secs',\r\n        formatted: secs,\r\n        digits: [\r\n            { max: 5, flip: TIME_IN_SECS.second * 10 },\r\n            { max: 9, flip: TIME_IN_SECS.second }\r\n        ]\r\n    };\r\n\r\n    useInterval(\r\n        () => {\r\n            setDuration(duration - 1);\r\n            if (Math.floor(duration) === 0 && !!props.callback) {\r\n                props.callback.call();\r\n            }\r\n        },\r\n        Math.floor(duration) <= 0 ? null : 1000\r\n    );\r\n\r\n    const renderElements = {};\r\n\r\n    Object.keys(timeData).forEach(unit => {\r\n        const time = timeData[unit];\r\n        const timeString = time['formatted']\r\n            .toString()\r\n            .padStart(time['digits'].length, '0');\r\n        renderElements[unit] = (\r\n            <div\r\n                className={classnames(\r\n                    'inline-block',\r\n                    classes.Unit,\r\n                    classes[time['cssClass']]\r\n                )}\r\n            >\r\n                {timeString.split('').map((digit, i) => (\r\n                    <Digit\r\n                        id={`${unit}-${i}`}\r\n                        key={`${unit}-${i}`}\r\n                        unit={unit}\r\n                        start={parseInt(digit)}\r\n                        max={time['digits'][i]['max']}\r\n                        flipIndicator={\r\n                            duration % time['digits'][i]['flip'] === 0 &&\r\n                            duration > 0\r\n                        }\r\n                    />\r\n                ))}\r\n                <div className={classes.UnitText}>{unit}</div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div\r\n            className={classnames('text-center', classes.CountdownTimer, {\r\n                [classes.SecondsLeft]: duration < TIME_IN_SECS.minute\r\n            })}\r\n        >\r\n            {duration >= TIME_IN_SECS.day ? (\r\n                <>\r\n                    {renderElements['days']}\r\n                    <div\r\n                        className={classnames(\r\n                            classes.UnitSeparator,\r\n                            classes.Days\r\n                        )}\r\n                    />\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n            {duration >= TIME_IN_SECS.minute ? (\r\n                <>\r\n                    {renderElements['hours']}\r\n                    <div className={classnames(classes.UnitSeparator)}>:</div>\r\n                    {renderElements['mins']}\r\n                    <div className={classnames(classes.UnitSeparator)}>:</div>\r\n                </>\r\n            ) : (\r\n                <></>\r\n            )}\r\n            {renderElements['secs']}\r\n        </div>\r\n    );\r\n};\r\n\r\nCdTimer.propTypes = {\r\n    time: PropTypes.number,\r\n    callback: PropTypes.func\r\n};\r\n\r\nCdTimer.defaultProps = {\r\n    time: 0\r\n};\r\n\r\nexport default CdTimer;\r\n","import { useEffect, useRef } from 'react';\r\n\r\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nfunction useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n\r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n\r\n    // Set up the interval.\r\n    useEffect(() => {\r\n        function tick() {\r\n            savedCallback.current();\r\n        }\r\n        if (delay !== null) {\r\n            let id = setInterval(tick, delay);\r\n            return () => clearInterval(id);\r\n        }\r\n    }, [delay]);\r\n}\r\n\r\nexport { useInterval };\r\n","import React from 'react';\r\n\r\n// CSS\r\nimport classnames from 'classnames';\r\nimport classes from './TimeController.module.css';\r\n\r\nconst Button = ({ children, className, ...props }) => (\r\n    <button\r\n        className={classnames(classes.Button, className)}\r\n        type=\"button\"\r\n        {...props}\r\n    >\r\n        {children}\r\n    </button>\r\n);\r\n\r\nexport default Button;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { TIME_IN_SECS, TIME_LIMIT } from '../constants';\r\n\r\n// Components\r\nimport Button from './ControllerButton';\r\n\r\n// FontAwesome\r\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faClock,\r\n    faPlus,\r\n    faMinus,\r\n    faUndoAlt,\r\n    faArrowRight,\r\n    faHourglassEnd\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\n// CSS\r\nimport classnames from 'classnames';\r\nimport classes from './TimeController.module.css';\r\n\r\nconst addTimeDefault = {\r\n    day: '',\r\n    hour: '',\r\n    minute: '',\r\n    second: ''\r\n};\r\n\r\nconst formatTime = time => time.toString().padStart(2, '0');\r\nconst setTimeDefault = date => ({\r\n    date: `${date.getFullYear()}-${formatTime(date.getMonth() + 1)}-${formatTime(date.getDate())}`,\r\n    time: `${formatTime(date.getHours())}:${formatTime(date.getMinutes())}:${formatTime(date.getSeconds())}`\r\n});\r\n\r\nconst TimeController = ({ modifyTime, setTime, resetToPresent, ...props }) => {\r\n    const date = new Date(props.time);\r\n    const [customAddTime, setCustomAddTime] = useState(addTimeDefault);\r\n    const [customSetTime, setCustomSetTime] = useState(setTimeDefault(date));\r\n\r\n    const [outOfBounds, setOutOfBounds] = useState(false);\r\n    const moddedModifyTime = modifier => {\r\n        const finalAmount =\r\n            Object.keys(customAddTime).reduce(\r\n                (acc, curr) => acc + (customAddTime[curr] || 0) * TIME_IN_SECS[curr], 0\r\n            ) * modifier;\r\n\r\n        if (Math.abs(props.time / 1000 + finalAmount) <= TIME_LIMIT) {\r\n            setOutOfBounds(false);\r\n            modifyTime(finalAmount);\r\n        } else {\r\n            setOutOfBounds(true);\r\n        }\r\n    };\r\n\r\n    const modifyField = (value, field) => {\r\n        setCustomAddTime({\r\n            ...customAddTime,\r\n            [field]: value\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.TimeControl}>\r\n            <div className=\"text-lg\">\r\n                <Icon icon={faClock} /> Time Control\r\n            </div>\r\n\r\n            <div className=\"flex items-center justify-center\">\r\n                <span\r\n                    className={classnames(\r\n                        'flex items-center flex-1',\r\n                        classes.InfoBlock\r\n                    )}\r\n                >\r\n                    <Icon icon={faHourglassEnd} className=\"mx-1\" />\r\n                    <span className=\"flex-1\">\r\n                        {outOfBounds ? (\r\n                            <span className=\"text-red-700\">\r\n                                Date must be between April 20th 271821 BCE and September 12, 275760 CE.\r\n                            </span>\r\n                        ) : (\r\n                            <>\r\n                                {date.toLocaleDateString()}{' '}\r\n                                {date.toLocaleTimeString()}\r\n                            </>\r\n                        )}\r\n                    </span>\r\n                </span>\r\n                <Button\r\n                    onClick={() => {\r\n                        resetToPresent();\r\n                        setOutOfBounds(false);\r\n                    }}\r\n                    className={classes.Red}\r\n                    title=\"Reset to present\"\r\n                >\r\n                    <Icon icon={faUndoAlt} />\r\n                </Button>\r\n            </div>\r\n\r\n            <div className=\"flex flex-col sm:flex-row\">\r\n                <div className={classes.InfoBlock}>\r\n                    Modify Time\r\n                    <div className=\"flex flex-col\">\r\n                        <input\r\n                            placeholder=\"Days\"\r\n                            type=\"number\"\r\n                            min=\"0\"\r\n                            value={customAddTime['day']}\r\n                            onChange={e => {\r\n                                modifyField(parseInt(e.target.value), 'day');\r\n                            }}\r\n                        />\r\n                        <input\r\n                            placeholder=\"Hours\"\r\n                            type=\"number\"\r\n                            min=\"0\"\r\n                            value={customAddTime['hour']}\r\n                            onChange={e => {\r\n                                modifyField(parseInt(e.target.value), 'hour');\r\n                            }}\r\n                        />\r\n                        <input\r\n                            placeholder=\"Minutes\"\r\n                            type=\"number\"\r\n                            min=\"0\"\r\n                            value={customAddTime['minute']}\r\n                            onChange={e => {\r\n                                modifyField(parseInt(e.target.value), 'minute');\r\n                            }}\r\n                        />\r\n                        <input\r\n                            placeholder=\"Seconds\"\r\n                            type=\"number\"\r\n                            min=\"0\"\r\n                            value={customAddTime['second']}\r\n                            onChange={e => {\r\n                                modifyField(parseInt(e.target.value), 'second');\r\n                            }}\r\n                        />\r\n                        <div className=\"flex justify-center\">\r\n                            <Button\r\n                                onClick={() => {\r\n                                    moddedModifyTime(1);\r\n                                }}\r\n                                title=\"Add to current time\"\r\n                            >\r\n                                <Icon icon={faPlus} />\r\n                            </Button>\r\n\r\n                            <Button\r\n                                onClick={() => {\r\n                                    moddedModifyTime(-1);\r\n                                }}\r\n                                title=\"Subtract from current time\"\r\n                            >\r\n                                <Icon icon={faMinus} />\r\n                            </Button>\r\n                            <Button\r\n                                onClick={() => {\r\n                                    setCustomAddTime(addTimeDefault);\r\n                                }}\r\n                                className={classes.Red}\r\n                                title=\"Reset to default value\"\r\n                            >\r\n                                <Icon icon={faUndoAlt} />\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={classes.InfoBlock}>\r\n                    Set Time\r\n                    <div className=\"flex flex-col\">\r\n                        <input\r\n                            type=\"date\"\r\n                            pattern=\"\\d{4}-\\d{2}-\\d{2}\"\r\n                            value={customSetTime['date']}\r\n                            required\r\n                            onChange={e => {\r\n                                setCustomSetTime({\r\n                                    date: e.target.value,\r\n                                    time: customSetTime['time']\r\n                                });\r\n                            }}\r\n                        />\r\n                        <input\r\n                            type=\"time\"\r\n                            step=\"1\"\r\n                            pattern=\"[0-9]{2}:[0-9]{2}:[0-9]{2}\"\r\n                            value={customSetTime['time']}\r\n                            required\r\n                            onChange={e => {\r\n                                setCustomSetTime({\r\n                                    date: customSetTime['date'],\r\n                                    time: e.target.value\r\n                                });\r\n                            }}\r\n                        />\r\n                        <div className=\"flex justify-center\">\r\n                            <Button\r\n                                onClick={() => {\r\n                                    // For some reason, months are implemented such that the internal value is 1 less\r\n                                    // than the value that humans are used to, but only months\r\n                                    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#Examples\r\n                                    const [year, month, day] = customSetTime['date'].split(\"-\").map(v => parseInt(v));\r\n                                    const time = customSetTime['time'].split(\":\").map(v => parseInt(v));\r\n                                    // Uglier but Date string parsing is REALLY bad\r\n                                    // https://stackoverflow.com/questions/2587345/why-does-date-parse-give-incorrect-results\r\n                                    setTime(\r\n                                        new Date(\r\n                                            year,\r\n                                            month - 1,\r\n                                            day,\r\n                                            ...time\r\n                                        ).getTime()\r\n                                    );\r\n                                }}\r\n                            >\r\n                                <Icon icon={faArrowRight} />\r\n                            </Button>\r\n                            <Button\r\n                                onClick={() => {\r\n                                    setCustomSetTime(setTimeDefault(date));\r\n                                }}\r\n                                className={classes.Red}\r\n                                title=\"Reset to default value\"\r\n                            >\r\n                                <Icon icon={faUndoAlt} />\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nTimeController.propTypes = {\r\n    time: PropTypes.number\r\n};\r\n\r\nexport default TimeController;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport CountdownTimer from './CountdownTimer/CountdownTimer';\nimport TimeController from './TimeController/TimeController';\n\nconst App = () => {\n    const [time, setTime] = useState(Date.now());\n\n    const modifyTime = addedTime => {\n        setTime(time + addedTime * 1000);\n    };\n\n    const setNewTime = newTime => {\n        setTime(newTime);\n    };\n\n    const resetToPresent = () => {\n        setTime(Date.now());\n    };\n\n    return (\n        <div className=\"App\">\n            <CountdownTimer time={time} />\n            <TimeController\n                time={time}\n                modifyTime={modifyTime}\n                setTime={setNewTime}\n                resetToPresent={resetToPresent}\n            />\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimeControl\":\"TimeController_TimeControl__2TIUA\",\"InfoBlock\":\"TimeController_InfoBlock__3AR9H\",\"Button\":\"TimeController_Button__3TZO4\",\"Red\":\"TimeController_Red__38LaD\"};"],"sourceRoot":""}